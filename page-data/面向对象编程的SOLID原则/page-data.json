{"componentChunkName":"component---node-modules-gatsby-theme-blog-src-templates-post-js","path":"/面向对象编程的SOLID原则","webpackCompilationHash":"a33831b61060aa09b70d","result":{"data":{"post":{"id":"0513fb46-1ab0-5973-9c3b-f85c17606bd5","title":"面向对象编程的SOLID原则","date":"July 08, 2017","excerpt":"Javascript虽然与传统的面向对象编程语言Java有所不同，但是其设计模式都是围绕着SOLID原则，以便更容易创建可维护和可拓展的系统。 单一职责原则（SRP）：表明软件组件（函数、类、模块）必须庄主与单一的任务（只有单一的职责） 开/闭原则（OCP…","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"面向对象编程的SOLID原则\",\n  \"date\": \"2017-07-08T23:13:58.000Z\",\n  \"tags\": \"设计模式\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Javascript\\u867D\\u7136\\u4E0E\\u4F20\\u7EDF\\u7684\\u9762\\u5411\\u5BF9\\u8C61\\u7F16\\u7A0B\\u8BED\\u8A00Java\\u6709\\u6240\\u4E0D\\u540C\\uFF0C\\u4F46\\u662F\\u5176\\u8BBE\\u8BA1\\u6A21\\u5F0F\\u90FD\\u662F\\u56F4\\u7ED5\\u7740SOLID\\u539F\\u5219\\uFF0C\\u4EE5\\u4FBF\\u66F4\\u5BB9\\u6613\\u521B\\u5EFA\\u53EF\\u7EF4\\u62A4\\u548C\\u53EF\\u62D3\\u5C55\\u7684\\u7CFB\\u7EDF\\u3002\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\u5355\\u4E00\\u804C\\u8D23\\u539F\\u5219\\uFF08SRP\\uFF09\\uFF1A\\u8868\\u660E\\u8F6F\\u4EF6\\u7EC4\\u4EF6\\uFF08\\u51FD\\u6570\\u3001\\u7C7B\\u3001\\u6A21\\u5757\\uFF09\\u5FC5\\u987B\\u5E84\\u4E3B\\u4E0E\\u5355\\u4E00\\u7684\\u4EFB\\u52A1\\uFF08\\u53EA\\u6709\\u5355\\u4E00\\u7684\\u804C\\u8D23\\uFF09\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\u5F00/\\u95ED\\u539F\\u5219\\uFF08OCP\\uFF09\\uFF1A\\u8868\\u660E\\u8F6F\\u4EF6\\u8BBE\\u8BA1\\u65F6\\u5FC5\\u987B\\u65F6\\u523B\\u8003\\u8651\\u5230\\uFF08\\u4EE3\\u7801\\uFF09\\u53EF\\u80FD\\u7684\\u53D1\\u5C55\\uFF08\\u5177\\u6709\\u7684\\u62D3\\u5C55\\u6027\\uFF09\\uFF0C\\u4F46\\u662F\\u7A0B\\u5E8F\\u7684\\u53D1\\u5C55\\u5FC5\\u987B\\u6700\\u5C11\\u5730\\u4FEE\\u6539\\u5DF2\\u6709\\u7684\\u4EE3\\u7801\\uFF08\\u5BF9\\u5DF2\\u6709\\u7684\\u4FEE\\u6539\\u5C01\\u95ED\\uFF09\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\u91CC\\u6C0F\\u66FF\\u6362\\u539F\\u5219\\uFF08LSP\\uFF09\\uFF1A\\u8868\\u660E\\u53EA\\u8981\\u7EE7\\u627F\\u7684\\u662F\\u540C\\u4E00\\u4E2A\\u63A5\\u53E3\\uFF0C\\u7A0B\\u5E8F\\u7684\\u4EFB\\u610F\\u4E00\\u4E2A\\u7C7B\\u90FD\\u53EF\\u4EE5\\u88AB\\u5176\\u5B83\\u7C7B\\u66FF\\u6362\\u3002\\u5728\\u66FF\\u6362\\u5B8C\\u6210\\u540E\\uFF0C\\u4E0D\\u9700\\u8981\\u5176\\u5B83\\u989D\\u5916\\u7684\\u5DE5\\u4F5C\\u7A0B\\u5E8F\\u5C31\\u80FD\\u50CF\\u539F\\u6765\\u4E00\\u6837\\u8FD0\\u884C\\u3002\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\u63A5\\u53E3\\u9694\\u79BB\\u539F\\u5219\\uFF08ISP\\uFF09\\uFF1A\\u8868\\u660E\\u6211\\u4EEC\\u5E94\\u8BE5\\u5C06\\u90A3\\u4E9B\\u975E\\u5E38\\u5927\\u7684\\u63A5\\u53E3\\uFF08\\u5927\\u800C\\u5168\\u7684\\u63A5\\u53E3\\uFF09\\u62C6\\u5206\\u6210\\u4E00\\u4E9B\\u5C0F\\u7684\\u66F4\\u5177\\u4F53\\u7684\\u63A5\\u53E3\\uFF0C\\u8FD9\\u6837\\u5BA2\\u6237\\u7AEF\\u5C31\\u53EA\\u9700\\u5173\\u5FC3\\u5B83\\u4EEC\\u9700\\u8981\\u7528\\u5230\\u7684\\u63A5\\u53E3\\u3002\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\u4F9D\\u8D56\\u53CD\\u8F6C\\u539F\\u5219\\uFF08DIP\\uFF09\\uFF1A\\u8868\\u660E\\u4E00\\u4E2A\\u65B9\\u6CD5\\u5E94\\u8BE5\\u9075\\u4ECE\\u4F9D\\u8D56\\u4E8E\\u62BD\\u8C61\\uFF08\\u63A5\\u53E3\\uFF09\\u800C\\u4E0D\\u662F\\u4E00\\u4E2A\\u5B9E\\u4F8B\\uFF08\\u7C7B\\uFF09\\u7684\\u6982\\u5FF5\\u3002\")));\n}\n;\nMDXContent.isMDXComponent = true;"},"site":{"siteMetadata":{"title":"June's blog"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"id":"0513fb46-1ab0-5973-9c3b-f85c17606bd5","excerpt":"Javascript虽然与传统的面向对象编程语言Java有所不同，但是其设计模式都是围绕着SOLID原则，以便更容易创建可维护和可拓展的系统。 单一职责原则（SRP）：表明软件组件（函数、类、模块）必须庄主与单一的任务（只有单一的职责） 开/闭原则（OCP…","slug":"/面向对象编程的SOLID原则","title":"面向对象编程的SOLID原则","date":"July 08, 2017","siteTitle":"June's blog","socialLinks":[{"name":"twitter","url":"https://twitter.com/yzzhuo"},{"name":"github","url":"https://github.com/yzzhuo"}],"previous":{"node":{"id":"a41b8356-bd6e-5614-9598-70ac28f6ec8c","excerpt":"…","slug":"/javascript设计模式-单例模式","title":"javascript设计模式-单例模式","date":"June 23, 2017"}},"next":{"node":{"id":"9af695a3-1dc5-5b22-b081-2f52b1e40551","excerpt":"…","slug":"/策略模式","title":"javascript设计模式-策略模式","date":"July 10, 2017"}}}}}