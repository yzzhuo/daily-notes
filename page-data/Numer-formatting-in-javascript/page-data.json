{"componentChunkName":"component---node-modules-gatsby-theme-blog-src-templates-post-js","path":"/Numer-formatting-in-javascript","webpackCompilationHash":"a33831b61060aa09b70d","result":{"data":{"post":{"id":"09d5e100-8dc0-5e8e-9a4b-7ec9efd63fba","title":"Numer formatting in javascript","date":"July 25, 2019","excerpt":"In some countries like the U.K and U.S, they always like to use a comma to separete groups of thousands. And I encounter a requirement of…","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Numer formatting in javascript\",\n  \"date\": \"2019-07-25T15:45:17.000Z\",\n  \"tags\": \"javascript\",\n  \"category\": \"daily\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"In some countries like the U.K and U.S, they always like to use a comma to separete groups of thousands. And I encounter a requirement of feature is to format the number using the thousands separators. For example, \"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"12345 => 12,345\\n\")), mdx(\"p\", null, \"At first, I come up with the solution of counting the length of number and insert the comma to the string. But then I saw a more quick and simple solution from another developer is to use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"toLocaleString\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"var a = 100000000;\\na.toLocaleString(); // => return \\\"100,000,000\\\"\\n\")), mdx(\"p\", null, \"Feeling curious about more about it, I look into a javascript\\u2019s built-in object \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Intl  \"), \"  which provides language sensitive string comparison, number formatting, and date and time formatting.\"), mdx(\"p\", null, \"And \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Intl.NumberFormat\"), \" object is a constructor for objects that enable language sensitive number formatting. \"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"new Intl.NumberFormat().format(123213213) // return \\\"123,213,213\\\"\\n\")), mdx(\"p\", null, \"There are some options of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Intl.NumberFormat()\"), \", one of them is \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"useGrouping\"), \", and it\\u2019s default value is true, which result our format number contains thousands separators.\"), mdx(\"p\", null, \"In addtion, there are lots of useful effects of the  \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Intl.NumberFormat()\"), \",  we can use it to format a number as a currency , percent etc.\"));\n}\n;\nMDXContent.isMDXComponent = true;"},"site":{"siteMetadata":{"title":"June's blog"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"id":"09d5e100-8dc0-5e8e-9a4b-7ec9efd63fba","excerpt":"In some countries like the U.K and U.S, they always like to use a comma to separete groups of thousands. And I encounter a requirement of…","slug":"/Numer-formatting-in-javascript","title":"Numer formatting in javascript","date":"July 25, 2019","siteTitle":"June's blog","socialLinks":[{"name":"twitter","url":"https://twitter.com/yzzhuo"},{"name":"github","url":"https://github.com/yzzhuo"}],"previous":{"node":{"id":"56921c25-9b31-5e70-887b-5ff60ecadfc9","excerpt":"此教程是基于electron-autoupdater的自动更新方案。研究了一下electron文档原生的autoUpdater模块和elecrtron-builder配套的autoUpdater，最终选择后者是因为实现起来简单太多，而且在macOS和win…","slug":"/基于electron-autoupdater的自动更新方案","title":"基于electron-autoupdater的客户端自动更新方案","date":"March 14, 2018"}},"next":{"node":{"id":"9dd473ec-8d01-5e72-9f8e-213724148f29","excerpt":"There are some situations that we want to require multiple files and the files we required is changing most of the time. Although using…","slug":"/dynamic-require-with-require-context","title":"dynamic require with require.context","date":"August 06, 2019"}}}}}